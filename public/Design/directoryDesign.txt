내 프로젝트에서 넣는 파일들
1. fonts(assets)
- 폰트 파일도 js,css 처럼 다른 애셋들과 함께 번들링을 시키기 위해
- 필요에 따라 압축되며, 브라우저가 로드할때 폰트 파일 크기거 더 작아지도록
- 폰트처럼 중요한 리소스는 브라우저 캐시에 오래 남아 구 버전이 사용될 가능성이 있습니다
- 자주 사용되는 정적 리소스는 assets에서 관리하는 것이 일반적입니다.


public과 assets 폴더
- 두 디렉토리는 정적파일을 넣어서 보관하는 걸로 알고 있는데 뭐가다를까?

1. public 폴더의 특징
- 빌드과정에서 별도로 처리되지 않고 그대로 제공된다.
- vite가 번들링하지 않으며, 배포 시 파일 경로가 그대로 유지된다.(최적화, 해싱을 하지않는다.)
- 파일을 직접 참조하는 형태.
- 파일의 크기 제한이 없으며, 직접 url로 참조된다.

public 폴더를 쓰는경우는??
1) 빌드 과정에서 변하지 않는 파일을 사용할때.(favicon, 로고, 외부에서 직접 참조되는 파일)
2) 경로가 고정되어야 하는 파일이 필요한 경우(CDN 또는 특정 URL로 접근해야하는 파일)

2.assets 폴더의 특징
- vite가 src/assets 내의 파일을 번들에 포함하고 최적화한다.
- 파일 이름에 해시가 추가되어서 배포시 캐싱문제를 방지한다.
- 작은 크기의 파일은 데이터URL로 인라인 처리한다.(HTTPS 요청을 줄일 수 있음.)

assets 폴더를 쓰는 경우는??
- 어플리케이션 내부에서 사용되는 정적파일(이미지, 폰트, 아이콘 등)을 관리하고 자동으로 최적화를 원할때
- 파일 이름에 해시를 추가하고 캐싱 이슈를 방지하고 싶을때
- 작은 파일들은 자동으로 인라인 처리를 하고싶을때


어려운 말이 많이나왔제?
1. 빌드 
- 내가 만든 프로젝트를 실제 배포 가능한 형태로 변환하는 과정
- 디버깅용 기능제거, 코드 최적화(파일크기 감소), 코드압축(js, css압축), 파일구조 재구성(모듈 병합)
- dist 파일에 결과물이 떨어짐

2.번들링
- 여러개의 자바스크립트 코드들이 하나의 파일 또는 여러개의 번들 파일로 묶는 과정.
- 목적
 1) 여러 js파일을 하나로 묶어 HTTP 요청 수를 줄여 로드 속도 최적화
 2) 의존성 관리(다양한 모듈을 하나의 파일로 묶어서, 필요한 파일들을 자동으로 로드)
 3) 코드 스플리팅(필요한 부분만 나눠서 로드할 수 있게하여 초기로드 시간을 줄이고 성능향상.)
 - vite와 webpack같은 도구들이 번들링을 자동으로 처리해 주며, 빌드과정의 일부로 실행됨.

 3.해시 캐싱
 - 파일의 변경 여부를 감지하여 브라우저 캐시 문제를 해결하는 기술
 - 웹페이지 로드시 브라우저가 이미가지고 있는 js,css를 다시 다운로드 하지않는 원리로 업데이트가 되도 반영되지않는 이슈해결
 - 파일이름에 해시를 추가하여 관리함.

